#include<bits/stdc++.h>
using namespace std;
#define int long long
typedef long long i64;
struct info {
    i64 prop, sum;
} tree[200000 * 3]; //sum ????? ???? ???????? ?? ???? ????? ???? ?????? prop ?
void update(int node, int b, int e, int i, int j, i64 x)
{
    if (i > e || j < b)
        return;
    if (b >= i && e <= j) //?????? ????? ??????? ??????? ?????
    {
        tree[node].sum += ((e - b + 1) * x); //???? ???? ??? e-b+1 ??, ??? e-b+1 ??? x ???? ??? ?? ??????
        tree[node].prop += x; //????? ?????????? ???? x ???? ???
        return;
    }
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, i, j, x);
    update(Right, mid + 1, e, i, j, x);
    tree[node].sum = tree[Left].sum + tree[Right].sum + (e - b + 1) * tree[node].prop;
    //???? ???? ??? ???? ????????? ????? ???
    //??? ?? ??? ????? ??? ????? ???? ??? ???? ???????? ???? ???? ???
}
int query(int node, int b, int e, int i, int j, int carry = 0)
{
    if (i > e || j < b)
        return 0;

    if (b >= i and e <= j)
        return tree[node].sum + carry * (e - b + 1); //??? ?? ???? ???? ??? ??? ??????? ???? ???????? ?? ???? ???? ????? ????

    int Left = node << 1;
    int Right = (node << 1) + 1;
    int mid = (b + e) >> 1;

    int p1 = query(Left, b, mid, i, j, carry + tree[node].prop); //???????? ?????? ??? ???? ?????? carry ??????????
    int p2 = query(Right, mid + 1, e, i, j, carry + tree[node].prop);

    return p1 + p2;
}
int32_t main() {
///ios_base::sync_with_stdio(false);
//	cin.tie(NULL);
	int n,x,q;
	cin>>n>>x>>q;
	while(n--) {
		int l,r;
		cin>>l>>r;
		update(1,1,200000,l,r,1);
	}
	for(int i=1;i<=200000;i++) {
		int y=query(1,1,200000,i,i);
		if(y==x) update(1,1,200000,i,i,-y+1); else update(1,1,200000,i,i,-y);
	}
	while(q--) {
		int l,r;
		cin>>l>>r;
		cout<<query(1,1,200000,l,r)<<endl;
	}
}
